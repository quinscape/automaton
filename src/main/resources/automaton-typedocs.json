[
  {
    "name":"QueryType",
    "description":null,
    "fieldDocs":[
      {
        "name":"resolveFilterContext",
        "description":"Resolves filter context values without executing them in a filter. Only use this if you need the actual values of\nfilter contexts on the client side. The normal usage of context values is to embed <code>context()<\/code> nodes\nin filters.",
        "paramDocs":[
          {
            "name":"names",
            "description":"Name of the filter context values to return"
          }
        ]
      }
    ]
  },
  {
    "name":"MutationType",
    "description":null,
    "fieldDocs":[
      {
        "name":"deleteDomainObject",
        "description":"Deletes the domain object of the given type and with the given id.",
        "paramDocs":[
          {
            "name":"type",
            "description":"domain type name"
          },
          {
            "name":"id",
            "description":"domain object id to delete"
          },
          {
            "name":"cascade",
            "description":"optional list of relations to follow when deleting the object"
          }
        ]
      },
      {
        "name":"generateDomainObjectId",
        "description":"Generate a new domain object id using the application specific IdGenerator implementation.",
        "paramDocs":[
          {
            "name":"domainType",
            "description":"Domain type to generate an id for."
          },
          {
            "name":"count",
            "description":""
          }
        ]
      },
      {
        "name":"mergeWorkingSet",
        "description":"Server-side end-point for WorkingSet.merge()",
        "paramDocs":[
          {
            "name":"mergeConfig",
            "description":"Configuration for the current merge"
          },
          {
            "name":"changes",
            "description":"List of new and changed domain objects"
          },
          {
            "name":"deletions",
            "description":"List of object deletions"
          }
        ]
      },
      {
        "name":"persistWorkingSet",
        "description":"Server-side end-point for WorkingSet.persist()",
        "paramDocs":[
          {
            "name":"domainObjects",
            "description":"List of new and changed domain objects"
          },
          {
            "name":"deletions",
            "description":"List of object deletions"
          }
        ]
      },
      {
        "name":"resolveMerge",
        "description":"Dummy end-point to define the types involved in resolving a merge conflict, which happens on the client side only. This is only exists for documentation purposes.",
        "paramDocs":[
          
        ]
      },
      {
        "name":"storeDomainObject",
        "description":"Stores a single domain object of any type. Note that you might have to manually register an input type.",
        "paramDocs":[
          {
            "name":"domainObject",
            "description":"domain object wrapped as DomainObject scalar"
          }
        ]
      },
      {
        "name":"storeDomainObjects",
        "description":"Stores a list of domain object of any type. Note that you might have to manually register an input type.",
        "paramDocs":[
          {
            "name":"domainObjects",
            "description":"list of domain object wrapped as DomainObject scalar"
          }
        ]
      },
      {
        "name":"updateAssociations",
        "description":"Updates the associations of one source domain object over a many-to-many connection / an associative entity",
        "paramDocs":[
          {
            "name":"domainType",
            "description":"associative domain type / link table"
          },
          {
            "name":"leftSideRelation",
            "description":"The relation over which the source domain type is connected with the associative\n                             domain type / link table"
          },
          {
            "name":"sourceIds",
            "description":"Id-values of the current source object (all source id fields must contains this value)"
          },
          {
            "name":"domainObjects",
            "description":"Current list of instances that might contain place holder ids."
          }
        ]
      }
    ]
  },
  {
    "name":"ActivityType",
    "description":"Enum type for domain monitor activity.\n\nKeep in sync with src/message/monitor/useDomainMonitor.js in automaton-js.",
    "fieldDocs":[
      {
        "name":"ACTIVE",
        "description":"The user/connection is interacting with the entity on the client-side UI level",
        "paramDocs":[
          
        ]
      },
      {
        "name":"CHANGED",
        "description":"The user has changed the entity.",
        "paramDocs":[
          
        ]
      },
      {
        "name":"DELETED",
        "description":"The user has deleted the entity.",
        "paramDocs":[
          
        ]
      },
      {
        "name":"INACTIVE",
        "description":"User/connection stopped interacting with the object.\n\nIs not actually stored but just used as a counter signal to {@link #ACTIVE}.",
        "paramDocs":[
          
        ]
      }
    ]
  },
  {
    "name":"AppAttachment",
    "description":"File/image attachments",
    "fieldDocs":[
      {
        "name":"description",
        "description":"Description of the attachment, might be former filename",
        "paramDocs":[
          
        ]
      },
      {
        "name":"id",
        "description":"attachment id",
        "paramDocs":[
          
        ]
      },
      {
        "name":"type",
        "description":"Attachment media type",
        "paramDocs":[
          
        ]
      },
      {
        "name":"url",
        "description":"Attachment url as alternative to binary content",
        "paramDocs":[
          
        ]
      }
    ]
  },
  {
    "name":"AppAttachmentData",
    "description":"Data-base backed attachments",
    "fieldDocs":[
      {
        "name":"attachment",
        "description":"Attachment this data belongs to",
        "paramDocs":[
          
        ]
      },
      {
        "name":"attachment_id",
        "description":"Foreign key to the attachment this data belongs to",
        "paramDocs":[
          
        ]
      },
      {
        "name":"data",
        "description":"attachement as binary data",
        "paramDocs":[
          
        ]
      },
      {
        "name":"id",
        "description":"attachment data id",
        "paramDocs":[
          
        ]
      }
    ]
  },
  {
    "name":"AppConfig",
    "description":"Database backing for the AppScope",
    "fieldDocs":[
      {
        "name":"name",
        "description":"Application name",
        "paramDocs":[
          
        ]
      },
      {
        "name":"scope",
        "description":"JSON of the current application scope",
        "paramDocs":[
          
        ]
      }
    ]
  },
  {
    "name":"AppLogin",
    "description":"Database storage for spring security's remember-me feature",
    "fieldDocs":[
      {
        "name":"lastUsed",
        "description":"Last access of the login",
        "paramDocs":[
          
        ]
      },
      {
        "name":"series",
        "description":"Token series",
        "paramDocs":[
          
        ]
      },
      {
        "name":"token",
        "description":"Token",
        "paramDocs":[
          
        ]
      },
      {
        "name":"username",
        "description":"User name of the login",
        "paramDocs":[
          
        ]
      }
    ]
  },
  {
    "name":"AppTranslation",
    "description":"Datase backing for the application translations",
    "fieldDocs":[
      {
        "name":"created",
        "description":"creation date of the translation entry",
        "paramDocs":[
          
        ]
      },
      {
        "name":"id",
        "description":"translation id",
        "paramDocs":[
          
        ]
      },
      {
        "name":"locale",
        "description":"locale code of the translation'",
        "paramDocs":[
          
        ]
      },
      {
        "name":"modified",
        "description":"last modified date for the translation entry",
        "paramDocs":[
          
        ]
      },
      {
        "name":"processName",
        "description":"can contain a process name to limit the to just that process",
        "paramDocs":[
          
        ]
      },
      {
        "name":"tag",
        "description":"translation tag/key",
        "paramDocs":[
          
        ]
      },
      {
        "name":"translation",
        "description":"translation text",
        "paramDocs":[
          
        ]
      }
    ]
  },
  {
    "name":"AppUser",
    "description":"Application users. Used to authenticate users by spring security. Can have additional fields/relations (See UserInfoService)",
    "fieldDocs":[
      {
        "name":"created",
        "description":"Creation date of the user entry",
        "paramDocs":[
          
        ]
      },
      {
        "name":"disabled",
        "description":"true if the user account was disabled",
        "paramDocs":[
          
        ]
      },
      {
        "name":"id",
        "description":"user database id",
        "paramDocs":[
          
        ]
      },
      {
        "name":"lastLogin",
        "description":"last login of the user",
        "paramDocs":[
          
        ]
      },
      {
        "name":"login",
        "description":"User name / login",
        "paramDocs":[
          
        ]
      },
      {
        "name":"password",
        "description":"encrypted password",
        "paramDocs":[
          
        ]
      },
      {
        "name":"roles",
        "description":"Spring security roles of the user within the application",
        "paramDocs":[
          
        ]
      }
    ]
  },
  {
    "name":"AppUserConfig",
    "description":"Database backing for the UserScope",
    "fieldDocs":[
      
    ]
  },
  {
    "name":"AppVersion",
    "description":"Stores merge version metadata",
    "fieldDocs":[
      {
        "name":"created",
        "description":"Timestamp when the version was created",
        "paramDocs":[
          
        ]
      },
      {
        "name":"entityId",
        "description":"Id of the entity",
        "paramDocs":[
          
        ]
      },
      {
        "name":"entityType",
        "description":"Entity type the version refers to",
        "paramDocs":[
          
        ]
      },
      {
        "name":"fieldMask",
        "description":"DB column 'field_mask'",
        "paramDocs":[
          
        ]
      },
      {
        "name":"id",
        "description":"Id of the version. Is the same as the version field in the entity.",
        "paramDocs":[
          
        ]
      },
      {
        "name":"owner",
        "description":"User who created the version",
        "paramDocs":[
          
        ]
      },
      {
        "name":"ownerId",
        "description":"Foreign key to the user who created the version",
        "paramDocs":[
          
        ]
      },
      {
        "name":"prev",
        "description":"Previous version for that entity or null",
        "paramDocs":[
          
        ]
      }
    ]
  },
  {
    "name":"Attachment",
    "description":"Automaton-internal attachment class. Used as replacement of the yet unknown AppAttachment type within the\napplication.",
    "fieldDocs":[
      {
        "name":"type",
        "description":"Returns the content type / media type of the attachment",
        "paramDocs":[
          
        ]
      }
    ]
  },
  {
    "name":"AutomatonApplication",
    "description":"Root model of the application models.",
    "fieldDocs":[
      
    ]
  },
  {
    "name":"AutomatonRelation",
    "description":"Contains standardized Automaton relation tags.",
    "fieldDocs":[
      
    ]
  },
  {
    "name":"ColumnState",
    "description":"The state of a column within an interactive query.",
    "fieldDocs":[
      {
        "name":"enabled",
        "description":"True if column is enabled. Server might disabled columns.",
        "paramDocs":[
          
        ]
      },
      {
        "name":"name",
        "description":"Column name",
        "paramDocs":[
          
        ]
      },
      {
        "name":"sortable",
        "description":"True if the column is sortable.",
        "paramDocs":[
          
        ]
      }
    ]
  },
  {
    "name":"Configuration",
    "description":"Root model of the application models.",
    "fieldDocs":[
      
    ]
  },
  {
    "name":"DecimalPrecision",
    "description":"Contains the decimal precision for one decimal field within the domain.",
    "fieldDocs":[
      {
        "name":"precision",
        "description":"Returns the numeric precision for the field. (123.45 has a scale of 5)",
        "paramDocs":[
          
        ]
      },
      {
        "name":"scale",
        "description":"Returns the numeric scale/number of fractional digits for the field",
        "paramDocs":[
          
        ]
      }
    ]
  },
  {
    "name":"DomainActivity",
    "description":"Topic payload type for the domain monitor topic.",
    "fieldDocs":[
      {
        "name":"connectionId",
        "description":"Connection id this activity is associated with. Might be <code>null<\/code>.",
        "paramDocs":[
          
        ]
      },
      {
        "name":"domainType",
        "description":"Domain type of the entity",
        "paramDocs":[
          
        ]
      },
      {
        "name":"id",
        "description":"Id value of the entity",
        "paramDocs":[
          
        ]
      },
      {
        "name":"timeStamp",
        "description":"Timestamp this event was received. Clients do not need to set this, the server will overwrite it.",
        "paramDocs":[
          
        ]
      },
      {
        "name":"type",
        "description":"Type of activity.",
        "paramDocs":[
          
        ]
      },
      {
        "name":"user",
        "description":"User info string for this activity.",
        "paramDocs":[
          
        ]
      }
    ]
  },
  {
    "name":"EntityChange",
    "description":"Encapsulates multiple changes for a single entity / domain object.",
    "fieldDocs":[
      {
        "name":"changes",
        "description":"List of changes",
        "paramDocs":[
          
        ]
      },
      {
        "name":"id",
        "description":"Id value of the entity/domain object",
        "paramDocs":[
          
        ]
      },
      {
        "name":"type",
        "description":"Domain type of the object",
        "paramDocs":[
          
        ]
      },
      {
        "name":"version",
        "description":"Version of the entity/domain object",
        "paramDocs":[
          
        ]
      }
    ]
  },
  {
    "name":"EntityDeletion",
    "description":"Encapsulates the type and id of on object deletion in a working set.",
    "fieldDocs":[
      {
        "name":"id",
        "description":"Id of deleted object as generic scalar.",
        "paramDocs":[
          
        ]
      },
      {
        "name":"type",
        "description":"Domain type of deleted object",
        "paramDocs":[
          
        ]
      }
    ]
  },
  {
    "name":"EntityFieldChange",
    "description":"A change for one domain object field",
    "fieldDocs":[
      {
        "name":"field",
        "description":"Field the change applies to",
        "paramDocs":[
          
        ]
      },
      {
        "name":"value",
        "description":"Generic scalar value of the field. Must match the underlying GraphQL field type.",
        "paramDocs":[
          
        ]
      }
    ]
  },
  {
    "name":"EntityReference",
    "description":"Reference to a specific entity or entity version",
    "fieldDocs":[
      
    ]
  },
  {
    "name":"IncomingMessage",
    "description":"Container for incoming messages.",
    "fieldDocs":[
      
    ]
  },
  {
    "name":"InteractiveQuery",
    "description":"Interactive Query with [T] payload.",
    "fieldDocs":[
      {
        "name":"columnStates",
        "description":"Column states for the current result.",
        "paramDocs":[
          
        ]
      },
      {
        "name":"queryConfig",
        "description":"Query configuration the current result was produced with.",
        "paramDocs":[
          
        ]
      },
      {
        "name":"rowCount",
        "description":"Total row count available.",
        "paramDocs":[
          
        ]
      },
      {
        "name":"rows",
        "description":"List with current rows of [T].",
        "paramDocs":[
          
        ]
      },
      {
        "name":"type",
        "description":"Name of payload type (always '[T]')",
        "paramDocs":[
          
        ]
      }
    ]
  },
  {
    "name":"InteractiveQueryDefinition",
    "description":"Container for user-editable interactive query definition. Wraps a query string and a default query config.",
    "fieldDocs":[
      
    ]
  },
  {
    "name":"MergeConflict",
    "description":"A merge conflict for one entity.",
    "fieldDocs":[
      {
        "name":"decided",
        "description":"Returns true if all conflict fields are decided or if there are no conflict fields.",
        "paramDocs":[
          
        ]
      },
      {
        "name":"deleted",
        "description":"True if the entity has been deleted on the other side",
        "paramDocs":[
          
        ]
      },
      {
        "name":"fields",
        "description":"Conflicted fields. Will be both conflicts on scalar fields as well as conflicts on object fields representing\nforeign key and many-to-many conflicts and the informational/user-facing data to resolve those.",
        "paramDocs":[
          
        ]
      },
      {
        "name":"id",
        "description":"Id of the entity as generic scalar",
        "paramDocs":[
          
        ]
      },
      {
        "name":"theirVersion",
        "description":"The version of the currently stored entity.",
        "paramDocs":[
          
        ]
      },
      {
        "name":"type",
        "description":"Type of the entity.",
        "paramDocs":[
          
        ]
      }
    ]
  },
  {
    "name":"MergeConflictField",
    "description":"A field within a merge conflict.",
    "fieldDocs":[
      {
        "name":"informational",
        "description":"True if the conflict is only sent for informational purposes and for the \"apply\" function. It marks conflicts\nthat are already resolved.",
        "paramDocs":[
          
        ]
      },
      {
        "name":"ours",
        "description":"The user's value for the conflict.",
        "paramDocs":[
          
        ]
      },
      {
        "name":"references",
        "description":"In case of a pseudo conflict on a many-to-many field this contains entity references to the current set of link\ntype entities.",
        "paramDocs":[
          
        ]
      },
      {
        "name":"status",
        "description":"Field status for the conflict.",
        "paramDocs":[
          
        ]
      },
      {
        "name":"theirs",
        "description":"The currently stored value for the conflict.",
        "paramDocs":[
          
        ]
      }
    ]
  },
  {
    "name":"MergeFieldStatus",
    "description":null,
    "fieldDocs":[
      {
        "name":"OURS",
        "description":"We took the original value.",
        "paramDocs":[
          
        ]
      },
      {
        "name":"THEIRS",
        "description":"We took over the current database value",
        "paramDocs":[
          
        ]
      },
      {
        "name":"UNDECIDED",
        "description":"User has not yet decided.",
        "paramDocs":[
          
        ]
      },
      {
        "name":"VALUE",
        "description":"The user specified an alternate third value.",
        "paramDocs":[
          
        ]
      }
    ]
  },
  {
    "name":"MergeResolution",
    "description":"Encapsulates the result of a merge operation. Used in-memory on the client-side.",
    "fieldDocs":[
      {
        "name":"operation",
        "description":"Operation selected by the user.",
        "paramDocs":[
          
        ]
      },
      {
        "name":"resolutions",
        "description":"Resolutions to apply to the working set.",
        "paramDocs":[
          
        ]
      }
    ]
  },
  {
    "name":"MergeResolutionEntity",
    "description":"Encapsulates the merge resolution for one of the entities involved. Used in-memory on the client-side.",
    "fieldDocs":[
      
    ]
  },
  {
    "name":"MergeResolutionField",
    "description":"Encapsulates the merge resolution of a single field. Used in-memory on the client-side.",
    "fieldDocs":[
      {
        "name":"name",
        "description":"GraphQL name of the field.",
        "paramDocs":[
          
        ]
      },
      {
        "name":"value",
        "description":"Wrapped value",
        "paramDocs":[
          
        ]
      }
    ]
  },
  {
    "name":"MergeResolutionFieldType",
    "description":null,
    "fieldDocs":[
      {
        "name":"FIELD",
        "description":"Normal input field",
        "paramDocs":[
          
        ]
      },
      {
        "name":"FK_KEY",
        "description":"Foreign key raw key id field",
        "paramDocs":[
          
        ]
      },
      {
        "name":"FK_OBJECT",
        "description":"Embedded object for a foreign key",
        "paramDocs":[
          
        ]
      },
      {
        "name":"IGNORE",
        "description":"Ignored field",
        "paramDocs":[
          
        ]
      },
      {
        "name":"MANY_TO_MANY",
        "description":"Embedded list of objects for a m-to-n relation",
        "paramDocs":[
          
        ]
      }
    ]
  },
  {
    "name":"MergeResolutionOperation",
    "description":"User selected operation for a merge",
    "fieldDocs":[
      {
        "name":"APPLY",
        "description":"The merge resolutions are to be applied without executing the final store operation. The user can inspect the merge\nresult in the original form context.",
        "paramDocs":[
          
        ]
      },
      {
        "name":"CANCEL",
        "description":"The store operation was canceled. The working set remains as-is.",
        "paramDocs":[
          
        ]
      },
      {
        "name":"DISCARD",
        "description":"The whole process is aborted and the current working set data is to be discarded.",
        "paramDocs":[
          
        ]
      },
      {
        "name":"STORE",
        "description":"Merge resolutions are applied to the working set and the final store operation is performed.",
        "paramDocs":[
          
        ]
      }
    ]
  },
  {
    "name":"MergeResult",
    "description":"Encapsulates the result of a merge process, i.e. a list of domain object conflicts.",
    "fieldDocs":[
      {
        "name":"done",
        "description":"Returns true when the merge is done because there were no conflicts.",
        "paramDocs":[
          
        ]
      }
    ]
  },
  {
    "name":"MergeTypeConfig",
    "description":null,
    "fieldDocs":[
      {
        "name":"ignored",
        "description":"List of fields that are ignored in the merge, i.e. the last value always wins. This is useful for\nmeta-data fields like creation time or change author",
        "paramDocs":[
          
        ]
      },
      {
        "name":"mergeGroups",
        "description":"List of field groups are that only merged together. A change in one field of a merge-group always creates a\nconflict\nfor the whole group.",
        "paramDocs":[
          
        ]
      }
    ]
  },
  {
    "name":"ModuleFunctionReferences",
    "description":"Encapsulates the detected static function calls within one module.",
    "fieldDocs":[
      {
        "name":"module",
        "description":"Module name (without leading \"./\")",
        "paramDocs":[
          
        ]
      },
      {
        "name":"requires",
        "description":"Map of variable names mapping to",
        "paramDocs":[
          
        ]
      }
    ]
  },
  {
    "name":"NamedModel",
    "description":"Container model that has a unique name.",
    "fieldDocs":[
      
    ]
  },
  {
    "name":"OutgoingMessage",
    "description":"Container for outgoing messages.",
    "fieldDocs":[
      
    ]
  },
  {
    "name":"OutgoingMessageType",
    "description":"Encapsulates the outgoing message types used internally in automaton. You can use any unique type for your application\nif your server and client side agree on it.",
    "fieldDocs":[
      
    ]
  },
  {
    "name":"Process",
    "description":null,
    "fieldDocs":[
      {
        "name":"inputType",
        "description":"GraphQL type to use as input type. For root processes these inputs are mapped by name from the HTTP parameters,\nfor sub-processes, the sub-process state",
        "paramDocs":[
          
        ]
      },
      {
        "name":"resultType",
        "description":"GraphQL type to use as result type when using this process as sub process. A sub-process must have an result type,\na normal process usually doesn't need one.",
        "paramDocs":[
          
        ]
      }
    ]
  },
  {
    "name":"QueryConfig",
    "description":"Encapsulates all parameters of an interactive query.",
    "fieldDocs":[
      {
        "name":"condition",
        "description":"FilterDSL condition graph or null",
        "paramDocs":[
          
        ]
      },
      {
        "name":"id",
        "description":"Optional unique query identifier. Useful for server-side query implementations.",
        "paramDocs":[
          
        ]
      },
      {
        "name":"offset",
        "description":"Current offset within the paginated results. The number of rows to skip in the results.",
        "paramDocs":[
          
        ]
      },
      {
        "name":"pageSize",
        "description":"Maximum number of paginated results.,",
        "paramDocs":[
          
        ]
      },
      {
        "name":"sortFields",
        "description":"Current sort order for the query.",
        "paramDocs":[
          
        ]
      }
    ]
  },
  {
    "name":"StaticFunctionReferences",
    "description":"Encapsulates the information contained within a <code>track-usage.json<\/code> file on the java side.\n\nIt contains the results of JavaScript code analysis that detects statically analyzable calls within the application\nreact components and other modules.",
    "fieldDocs":[
      
    ]
  },
  {
    "name":"TopicUpdate",
    "description":"Message encapsulating updates for a topic",
    "fieldDocs":[
      {
        "name":"ids",
        "description":"Client-side handler ids to notify of this update.",
        "paramDocs":[
          
        ]
      },
      {
        "name":"payload",
        "description":"Returns the (filtered) published payload. Not to be confused with the outgoing message payload.",
        "paramDocs":[
          
        ]
      },
      {
        "name":"topic",
        "description":"Return the name of the topic this update is for.",
        "paramDocs":[
          
        ]
      }
    ]
  },
  {
    "name":"ViewDeclaration",
    "description":"A named constant within a view.",
    "fieldDocs":[
      
    ]
  }
]